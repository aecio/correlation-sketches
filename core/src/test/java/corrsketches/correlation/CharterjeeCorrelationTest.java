package corrsketches.correlation;

import static corrsketches.statistics.Stats.mean;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.byLessThan;

import corrsketches.statistics.Stats;
import java.util.Random;
import org.junit.jupiter.api.Test;

public class CharterjeeCorrelationTest {
  static final double delta = 0.001;

  @Test
  public void shouldComputeXiCorrelationForKnownFunctionsOfX() {
    //
    // In this test, the data for x is generated from a uniform distribution, whereas the data for y
    // is computed using functions of x. These functions can be seen in Figure 2 the original
    // Chatterjee's paper.
    //
    final int n = 100;
    double[] x = new double[n];
    double[] y = new double[n];

    Random rng = new Random(123);
    for (int i = 0; i < n; i++) {
      x[i] = rng.nextDouble() * 2 - 1; // uniform distribution in range -1 and 1
    }

    // linear function
    for (int i = 0; i < n; i++) {
      y[i] = x[i];
    }
    assertThat(ChatterjeeCorrelation.coefficient(x, y)).isCloseTo(0.970, byLessThan(0.005));

    // second-degree function
    for (int i = 0; i < n; i++) {
      y[i] = x[i] * x[i];
    }
    assertThat(ChatterjeeCorrelation.coefficient(x, y)).isCloseTo(0.941, byLessThan(0.005));

    // sinusoidal function
    for (int i = 0; i < n; i++) {
      y[i] = Math.sin(2 * Math.PI * x[i]);
    }
    assertThat(ChatterjeeCorrelation.coefficient(x, y)).isCloseTo(0.885, byLessThan(0.005));
  }

  @Test
  public void shouldComputeXiCorrelationWithTiedData() {
    //
    // The expected results from this test were computed using the R package 'XICOR' provided by the
    // paper authors. The test data below may contain repeated values, which lead to randomized
    // results due to breaking ties at random when sorting the data. Thus, we run the tests several
    // times and compare the average with the average of the estimates generated by the original
    // implementation from the 'XICOR' R package.
    //
    double[] x;
    double[] y;
    int N = 1000; // number of repeated trials
    double[] xis;

    // TEST CASE 1
    x = new double[] {1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11};
    y = new double[] {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6};
    // regression dependence between x and y
    xis = computeXiCorrelationEstimates(x, y, N);
    assertThat(mean(xis)).isCloseTo(0.7857143, byLessThan(0.01));
    // the inverse dependence direction should be weaker
    xis = computeXiCorrelationEstimates(y, x, N);
    assertThat(mean(xis)).isCloseTo(0.6344086, byLessThan(0.08));

    // TEST CASE 2
    x = new double[] {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};
    y = new double[] {1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1};
    xis = computeXiCorrelationEstimates(x, y, N);
    assertThat(mean(xis)).isCloseTo(0.828571, byLessThan(0.01));
    xis = computeXiCorrelationEstimates(y, x, N);
    assertThat(mean(xis)).isCloseTo(0.828571, byLessThan(0.01));

    // TEST CASE 3
    x = new double[] {1, 2, 3, 3, 4, 5, 6, 2, 7};
    y = new double[] {1, 2, 3, 3, 4, 5, 6, 7, 2};
    xis = computeXiCorrelationEstimates(x, y, N);
    assertThat(mean(xis)).isCloseTo(0.118964, byLessThan(0.05));
    assertThat(Stats.std(xis)).isCloseTo(0.080345, byLessThan(0.05));

    // TEST CASE 4
    x = new double[] {1.0, 1.0, 1.0, 2.0, 2.0, 2.0};
    y = new double[] {3.1, 3.2, 3.3, 4.1, 4.2, 4.3};
    xis = computeXiCorrelationEstimates(x, y, N);

    assertThat(mean(xis)).isCloseTo(0.288229, byLessThan(0.05));
    assertThat(Stats.std(xis)).isCloseTo(0.112913, byLessThan(0.05));

    // TEST CASE 5
    x =
        new double[] {
          1, 2, 2, 2, 2, 2, 1, 1, 3, 1, 2, 2, 4, 2, 2, 4, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2,
          3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2
        };
    y =
        new double[] {
          1, 2, 2, 3, 2, 2, 1, 1, 2, 2, 2, 1, 4, 2, 3, 4, 2, 3, 1, 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 1,
          2, 2, 2, 1, 2, 2, 3, 2, 2, 3, 1, 2, 3, 2
        };
    xis = computeXiCorrelationEstimates(x, y, N);
    assertThat(mean(xis)).isCloseTo(0.131044, byLessThan(0.02));
    assertThat(Stats.std(xis)).isCloseTo(0.101258, byLessThan(0.02));
  }

  private double[] computeXiCorrelationEstimates(double[] x, double[] y, int nTrials) {
    double[] xis = new double[nTrials];
    for (int i = 0; i < nTrials; i++) {
      xis[i] = ChatterjeeCorrelation.coefficient(x, y);
    }
    return xis;
  }
}
